# Possible values for selector and replacer:
#   BOLTZMANN
#   DETERMINISTIC_TOURNEY
#   PROBABILISTIC_TOURNEY
#   ELITE
#   RANKING
#   ROULETTE
#   UNIVERSAL
FIRST_SELECTOR=ELITE
SECOND_SELECTOR=PROBABILISTIC_TOURNEY
FIRST_REPLACER_SELECTOR=ELITE
SECOND_REPLACER_SELECTOR=PROBABILISTIC_TOURNEY
# Percentage of first replacer selector used (in [0,1])
REPLACER_PROPORTION=0.5
# If DETERMINISTIC_TOURNEY is chosen you must also
#   set the amount of participants per duel.
#   Must be an integer.
PARTICIPANTS=1
# Possible values for mutator:
#   UNIFORM,
#   NON_UNIFORM
MUTATOR=UNIFORM
# If UNIFORM mutator is chosen you must also
#   set the probability of mutation.
#   Must be a double.
MUTATOR_PROBABILITY=1
# Possible values for crosser:
#   ANNULAR
#   SINGLE_POINT
#   TWO_POINTS
#   UNIFORM
CROSSER=SINGLE_POINT
# If UNIFORM_CROSSER crosser is chosen you must also
#   set the probability of crossover.
#   Must be a double.
UNIFORM_CROSSER_PROBABILITY=0.75
# Generational gap
#   Must be a double in [0,1]
# Possible values for breaker:
#   GENERATION,
#   OPTIMAL,
#   STRUCTURE,
#   CONTENT
BREAKER=CONTENT
# If GENERATION breaker is chosen you must also set
#   the max amount of generations.
MAX_GENERATIONS=1000
# If OPTIMAL breaker is chosen you must also set
#   the optimal value threshold (in [0,1])
THRESHOLD=0.15
# If CONTENT breaker is chosen you must also set
# the number of generations that can be used to get better
WINDOW=10000
# the proportion of the optimal value that is considered an improvement
# values in [0,1]
TOLERANCE=0.01 
# The generational gap must be in [0,1]
GENERATIONAL_GAP=0.5
# Population size
#   Must be an integer.
POP_SIZE=100
# % of population that will be selected
#   with FIRST_SELECTOR
#   Must be a double in [0,1]
FIRST_SELECTOR_PCT=0.75
# % of population that will be selected
#   with FIRST_REPLACER
#   Must be a double in [0,1]
FIRST_REPLACER_PCT=0.75